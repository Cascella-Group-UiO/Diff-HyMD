[nn]
systems = ["dppc"]          # list of directories of the systems that need to be trained
n_epochs = 300              # Number of training iterations
equilibration = 2000        # Whether to run N equilibration steps before the differentiable dynamics
teacher_forcing = false     # Whether to use the last positions and velocities as starting point for the next epoch
chain = false               # Whether to chain different optimizers, see example below
shuffle = true              # Whether to shuffle the indices of dataset at the start of each epoch. 
                            # Only relevant when is 'systems' contains more than one element.

[nn.optimizer]
name = 'adabelief'          # Name of the optimizer, refer to the optax documentation (https://optax.readthedocs.io/en/latest/api.html) 
                            # to check the available optimizers and their options                                                     
learning_rate = 0.1         # Can also be replaced with a LR scheduler, see below
b1 = 0.1                    # Example optimizer options
b2 = 0.4

# Example with LR scheduler, refer to the optax documentation for the available schedulers
# [nn.optimizer.learning_rate]
# schedule = "exponential_decay"
# init_value = 5
# transition_steps = 200
# decay_rate = 0.98
# transition_begin = 10

# Example when chaining multiple optax transformations
# chain = true
# [[nn.optimizer]] # double brackets are needed!
# name = 'clip'
# max_delta = 1e3

# [[nn.optimizer]]
# name = 'sgd'
# learning_rate = 1e-2

# This section specifies the loss function and its parameters
[nn.loss]
name = 'density_and_apl'               # Only 'density_and_apl' is available right now             
metric = "mse"                         # Availble options: 'mse', 'rmse', 'smape', 'l2e' (L2 loss) 
target_density = "reference_aa.npy"    # Reference all-atom density profiles

# optional parameters
width_ratio = 0.5        # Gaussian KDE width
density_weight = 1       # Weight of the lateral density       
apl_weight = 100         # Weight of the Area Per Lipid
constraint = "cubic"     # Individual chi pairs constraints, see below
k_constraint = 0.01      # Strength of the constraint
boundary = 300           # General chi constraint to prevent big forces (default = false)

# System sepcific loss arguments (can be mixed-matched with the ones above for better control)
[nn.system_args.dppc]
com_type = "C1"          # Type selection for the COM calculation
n_lipids = 80            # Number of lipids in the system
target_apl = 0.633       # Target Area Per Lipid value

[nn.model]
chi = [
    # PC
    [   'Q0',    'Qa',  -10.41],
    [   'Q0',    'Na',  -10.57],
    [   'Q0',    'C1',  -13.73],
    [   'Q0',     'W',  -15.51],
    # Phosphate
    [   'Qa',    'Na',   -8.62],
    [   'Qa',    'C1',   19.96],
    [   'Qa',     'W',   -3.02],
    # Glycerol
    [   'Na',    'C1',   16.47],
    [   'Na',     'W',  -12.05],
    # Tails
    [   'C1',     'W',   24.28],
#   [   'C1',     'W',   24.28, "cs"], # add a "cs" to constrain the spcified chi pair
]
self_interaction = false    # Whether to train the diagonal terms in the chi matrix
